type: edu
files:
- name: src/client/Main.java
  visible: true
  text: |
    package client;

    import java.util.Scanner;

    public class Main {

        public static void main(String[] args) {
            Scanner scan = new Scanner(System.in);

            String[] JSONdb = new String[100];
            for (int i = 0; i < 100; i++) {
                JSONdb[i] = "";
            }

            String choice = null;

            while (!choice.equals("exit")) {
                String[] choiceArray = scan.nextLine().split(" ");
                choice = choiceArray[0];
                switch (choice) {
                    case "set":
                        StringBuilder sb = new StringBuilder();
                        for (int i = 2; i < choiceArray.length; i++) {
                            sb.append(choiceArray[i]);
                        }
                        String newString = sb.toString();
                        JSONdb[Integer.parseInt(choiceArray[1])-1] = newString;
                        break;
                    case "get":
                        if (!JSONdb[Integer.parseInt(choiceArray[1])-1].equals("")) {
                            System.out.println(JSONdb[Integer.parseInt(choiceArray[1])-1]);
                        } else {
                            System.out.println("ERROR");
                        }
                        break;
                    case "delete":
                        if (!JSONdb[Integer.parseInt(choiceArray[1])-1].equals("")) {
                            JSONdb[Integer.parseInt(choiceArray[1])-1] = "";
                            System.out.println("OK");
                        } else {
                            System.out.println("ERROR");
                        }
                        break;

                    default:
                        break;
                }

            }
        }
    }
  learner_created: false
- name: src/server/Main.java
  visible: true
  text: |
    package server;


    import java.util.Scanner;

    public class Main {

        public static void main(String[] args) {
            Scanner scan = new Scanner(System.in);

            String[] JSONdb = new String[100];
            for (int i = 0; i < 100; i++) {
                JSONdb[i] = "";
            }

            String choice = "";

            while (!choice.equals("exit")) {
                String[] choiceArray = scan.nextLine().split(" ");
                choice = choiceArray[0];
                switch (choice) {
                    case "set":
                        StringBuilder sb = new StringBuilder();
                        for (int i = 2; i < choiceArray.length; i++) {
                            sb.append(choiceArray[i] + " ");
                        }
                        String newString = sb.toString();
                        JSONdb[Integer.parseInt(choiceArray[1])-1] = newString;
                        System.out.println("OK");
                        break;
                    case "get":
                        if (!JSONdb[Integer.parseInt(choiceArray[1])-1].equals("")) {
                            System.out.println(JSONdb[Integer.parseInt(choiceArray[1])-1]);
                        } else {
                            System.out.println("ERROR");
                        }
                        break;
                    case "delete":
                        if (Integer.parseInt(choiceArray[1]) > 100 || Integer.parseInt(choiceArray[1]) < 0) {
                            System.out.println("ERROR");
                        } else if (!JSONdb[Integer.parseInt(choiceArray[1])-1].equals("")) {
                            JSONdb[Integer.parseInt(choiceArray[1])-1] = "";
                            System.out.println("OK");
                        } else {
                            System.out.println("OK");
                        }
                        break;

                    default:
                        break;
                }

            }
        }
    }
  learner_created: false
- name: test/JsonDatabaseTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    public class JsonDatabaseTest extends StageTest<String> {

        private static final String CORRECT_SERVER_OUTPUT =
            "Server started!\n" +
                "Received: Give me a record # N\n" +
                "Sent: A record # N was sent!";

        private static final String CORRECT_CLIENT_OUTPUT =
            "Client started!\n" +
                "Sent: Give me a record # N\n" +
                "Received: A record # N was sent!";

        @DynamicTestingMethod
        CheckResult test() throws InterruptedException {

            TestedProgram server = new TestedProgram(server.Main.class);
            server.startInBackground();
            Thread.sleep(500);

            String serverOutput = server.getOutput().trim();

            if (!serverOutput.trim().equals("Server started!")) {
                return CheckResult.wrong("Server output should be 'Server started!' until a client connects!");
            }

            TestedProgram client = new TestedProgram(client.Main.class);

            String clientOutput = client.start();
            serverOutput += "\n" + server.getOutput();

            String[] serverOutputLines = serverOutput.split("\n");

            if (serverOutputLines.length != 3) {
                return CheckResult.wrong("After the client connects to the server, the server output should contain 3 lines!");
            }

            String serverOutputLastLine = serverOutputLines[serverOutputLines.length - 1];

            if (!serverOutputLastLine.contains("Sent: A record #") || !serverOutputLastLine.contains("was sent!")) {
                return CheckResult.wrong("Server output after client connects to the server should be:\n"
                    + CORRECT_SERVER_OUTPUT + "\n\nWhere N is some number.\n\nYour output:\n" + serverOutput);
            }

            String[] clientOutputLines = clientOutput.split("\n");

            if (clientOutputLines.length != 3) {
                return CheckResult.wrong("After the client connects to the server, the client output should contain 3 lines!");
            }

            String clientOutputLastLine = clientOutputLines[clientOutputLines.length - 1];

            if (!clientOutputLastLine.contains("Received: A record #") || !clientOutputLastLine.contains("was sent!")) {
                return CheckResult.wrong("Client output after client connects to the server should be:\n"
                    + CORRECT_CLIENT_OUTPUT + "\n\nWhere N is some number.\n\nYour output:\n" + clientOutput);
            }

            return CheckResult.correct();
        }
    }
  learner_created: false
feedback_link: https://hyperskill.org/projects/65/stages/349/implement#comment
status: Solved
record: 1
